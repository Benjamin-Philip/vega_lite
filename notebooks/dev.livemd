# Vega-Lite

## Setup

```elixir
import IEx.Helpers
recompile()
```

```elixir
alias VegaLite, as: Vl
```

## Examples

```elixir
Vl.from_json("""
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "Stock prices of 5 Tech Companies over Time.",
  "data": {"url": "https://vega.github.io/editor/data/stocks.csv"},
  "mark": "trail",
  "encoding": {
    "x": {"field": "date", "type": "temporal"},
    "y": {"field": "price", "type": "quantitative"},
    "size": {"field": "price", "type": "quantitative"},
    "color": {"field": "symbol", "type": "nominal"}
  }
}
""")
```

```elixir
# {
#   "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
#   "description": "Stock prices of 5 Tech Companies over Time.",
#   "data": {"url": "data/stocks.csv"},
#   "mark": "trail",
#   "encoding": {
#     "x": {"field": "date", "type": "temporal"},
#     "y": {"field": "price", "type": "quantitative"},
#     "size": {"field": "price", "type": "quantitative"},
#     "color": {"field": "symbol", "type": "nominal"}
#   }
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/stocks.csv", format: :csv)
|> Vl.encode_field(:x, "date", type: :temporal)
|> Vl.encode_field(:y, "price", type: :quantitative)
|> Vl.encode_field(:size, "price", type: :quantitative)
|> Vl.encode_field(:color, "symbol", type: :nominal)
|> Vl.mark(:trail)
```

```elixir
# {
#   "width": 300,
#   "height": 150,
#   "data": {
#     "sequence": {
#       "start": 0,
#       "stop": 12.7,
#       "step": 0.1,
#       "as": "x"
#     }
#   },
#   "transform": [
#     {
#       "calculate": "sin(datum.x)",
#       "as": "sin(x)"
#     }
#   ],
#   "mark": "line",
#   "encoding": {
#     "x": {
#       "field": "x",
#       "type": "quantitative"
#     },
#     "y": {
#       "field": "sin(x)",
#       "type": "quantitative"
#     }
#   }
# }

Vl.new(width: 300, height: 150)
|> Vl.data(sequence: [start: 0, stop: 12.7, step: 0.1, as: "x"])
|> Vl.transform(calculate: "sin(datum.x)", as: "sin(x)")
|> Vl.mark(:line)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "sin(x)", type: :quantitative)
```

```elixir
# {
#   "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
#   "description": "A scatterplot showing body mass and flipper lengths of penguins.",
#   "data": {
#     "url": "data/penguins.json"
#   },
#   "mark": "point",
#   "encoding": {
#     "x": {
#       "field": "Flipper Length (mm)",
#       "type": "quantitative",
#       "scale": {"zero": false}
#     },
#     "y": {
#       "field": "Body Mass (g)",
#       "type": "quantitative",
#       "scale": {"zero": false}
#     },
#     "color": {"field": "Species", "type": "nominal"},
#     "shape": {"field": "Species", "type": "nominal"}
#   }
# }

Vl.new(title: "Penguins plot")
|> Vl.data_from_url("https://vega.github.io/editor/data/penguins.json")
|> Vl.encode_field(:x, "Flipper Length (mm)", type: :quantitative, scale: [zero: false])
|> Vl.encode_field(:y, "Body Mass (g)", type: :quantitative, scale: [zero: false])
|> Vl.encode_field(:color, "Species", type: :nominal)
|> Vl.encode_field(:shape, "Species", type: :nominal)
|> Vl.mark(:point)
```

```elixir
Vl.new(title: "Penguins plot", width: 400, height: 400)
|> Vl.data_from_url("https://vega.github.io/editor/data/penguins.json")
|> Vl.encode_field(:x, "Flipper Length (mm)", type: :quantitative, scale: [zero: false])
|> Vl.encode_field(:y, "Body Mass (g)", type: :quantitative, scale: [zero: false])
|> Vl.encode_field(:color, "Species", type: :nominal)
|> Vl.encode_field(:shape, "Species", type: :nominal)
|> Vl.encode(:size, value: 100)
|> Vl.mark(:point, tooltip: true)
```

```elixir
Vl.from_json("""
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A scatterplot showing body mass and flipper lengths of penguins.",
  "data": {
    "url": "https://vega.github.io/editor/data/penguins.json"
  },
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Flipper Length (mm)",
      "type": "quantitative",
      "scale": {"zero": false}
    },
    "y": {
      "field": "Body Mass (g)",
      "type": "quantitative",
      "scale": {"zero": false}
    },
    "color": {"field": "Species", "type": "nominal"},
    "shape": {"field": "Species", "type": "nominal"}
  }
}
""")
```

```elixir
# {
#   "data": {"url": "data/stocks.csv"},
#   "layer": [
#     {
#       "mark": "line",
#       "encoding": {
#         "x": {"field": "date", "type": "temporal"},
#         "y": {"field": "price", "type": "quantitative"},
#         "color": {"field": "symbol", "type": "nominal"}
#       }
#     },
#     {
#       "mark": "rule",
#       "encoding": {
#         "y": {"field": "price", "aggregate": "mean"},
#         "size": {"value": 2},
#         "color": {"field": "symbol"}
#       }
#     }
#   ]
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/stocks.csv", format: :csv)
|> Vl.layers([
  Vl.new()
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "date", type: :temporal)
  |> Vl.encode_field(:y, "price", type: :quantitative)
  |> Vl.encode_field(:color, "symbol", type: :nominal),
  Vl.new()
  |> Vl.mark(:rule)
  |> Vl.encode_field(:y, "price", aggregate: :mean)
  |> Vl.encode(:size, value: 2)
  |> Vl.encode_field(:color, "symbol", type: :nominal)
])
```

```elixir
# {
#   "data": {
#     "values": [
#       {"a": "A", "b": 28},
#       {"a": "B", "b": 55},
#       {"a": "C", "b": 43},
#       {"a": "G", "b": 19},
#       {"a": "H", "b": 87},
#       {"a": "I", "b": 52},
#       {"a": "D", "b": 91},
#       {"a": "E", "b": 81},
#       {"a": "F", "b": 53}
#     ]
#   },
#   "transform": [
#     {"calculate": "2*datum.b", "as": "b2"},
#     {"filter": "datum.b2 > 60"}
#   ],
#   "mark": "bar",
#   "encoding": {
#     "y": {"field": "b2", "type": "quantitative"},
#     "x": {"field": "a", "type": "ordinal"}
#   }
# }

data = [
  %{"a" => "A", "b" => 28},
  %{"a" => "B", "b" => 55},
  %{"a" => "C", "b" => 43},
  %{"a" => "G", "b" => 19},
  %{"a" => "H", "b" => 87},
  %{"a" => "I", "b" => 52},
  %{"a" => "D", "b" => 91},
  %{"a" => "E", "b" => 81},
  %{"a" => "F", "b" => 53}
]

Vl.new()
|> Vl.data_from_values(data)
|> Vl.transform(calculate: "2 * datum.b", as: "b2")
|> Vl.transform(filter: "datum.b2 > 60")
|> Vl.mark(:bar)
|> Vl.encode_field(:y, "b2", type: :quantitative)
|> Vl.encode_field(:x, "a", type: :ordinal)
```

```elixir
x = 1..100
y = 1..100

Vl.new(width: 400, height: 400)
|> Vl.data_from_series(x: x, y: y)
|> Vl.mark(:line)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

```elixir
# {
#   "width": 500,
#   "height": 300,
#   "data": {
#     "url": "data/airports.csv"
#   },
#   "projection": {
#     "type": "albersUsa"
#   },
#   "mark": "circle",
#   "encoding": {
#     "longitude": {
#       "field": "longitude",
#       "type": "quantitative"
#     },
#     "latitude": {
#       "field": "latitude",
#       "type": "quantitative"
#     },
#     "size": {"value": 10}
#   },
#   "config": {
#     "view": {
#       "stroke": "transparent"
#     }
#   }
# }

Vl.new(width: 500, height: 300)
|> Vl.data_from_url("https://vega.github.io/editor/data/airports.csv")
|> Vl.projection(type: :albers_usa)
|> Vl.mark(:circle)
|> Vl.encode_field(:longitude, "longitude", type: :quantitative)
|> Vl.encode_field(:latitude, "latitude", type: :quantitative)
|> Vl.encode(:size, value: 10)
|> Vl.config(view: [stroke: :transparent])
```

```elixir
# {
#   "data": {"url": "data/cars.json"},
#   "facet": {"row": {"field": "Origin"}},
#   "spec": {
#     "mark": "bar",
#     "encoding": {
#       "x": {
#         "bin": {"maxbins": 15},
#         "field": "Horsepower",
#         "type": "quantitative"
#       },
#       "y": {"aggregate": "count", "type": "quantitative"}
#     }
#   }
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/cars.json")
|> Vl.facet(
  [row: [field: "Origin"]],
  Vl.new()
  |> Vl.mark(:bar)
  |> Vl.encode_field(:x, "Horsepower", type: :quantitative, bin: [maxbins: 15])
  |> Vl.encode(:y, aggregate: :count, type: :quantitative)
)
```

```elixir
# {
#   "data": {"url": "data/penguins.json"},
#   "repeat": {
#     "row": [
#       "Beak Length (mm)",
#       "Beak Depth (mm)",
#       "Flipper Length (mm)",
#       "Body Mass (g)"
#     ],
#     "column": [
#       "Body Mass (g)",
#       "Flipper Length (mm)",
#       "Beak Depth (mm)",
#       "Beak Length (mm)"
#     ]
#   },
#   "spec": {
#     "width": 150,
#     "height": 150,
#     "mark": "point",
#     "encoding": {
#       "x": {
#         "field": {"repeat": "column"},
#         "type": "quantitative",
#         "scale": {"zero": false}
#       },
#       "y": {
#         "field": {"repeat": "row"},
#         "type": "quantitative",
#         "scale": {"zero": false}
#       },
#       "color": {"field": "Species", "type": "nominal"}
#     }
#   }
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/penguins.json")
|> Vl.repeat(
  [
    row: [
      "Beak Length (mm)",
      "Beak Depth (mm)",
      "Flipper Length (mm)",
      "Body Mass (g)"
    ],
    column: [
      "Body Mass (g)",
      "Flipper Length (mm)",
      "Beak Depth (mm)",
      "Beak Length (mm)"
    ]
  ],
  Vl.new(width: 150, height: 150)
  |> Vl.mark(:point)
  |> Vl.encode_repeat(:x, :column, type: :quantitative, scale: [zero: false])
  |> Vl.encode_repeat(:y, :row, type: :quantitative, scale: [zero: false])
  |> Vl.encode_field(:color, "Species", type: :nominal)
)
```

```elixir
Vl.from_json("""
{
  "data": { "url": "https://vega.github.io/editor/data/cars.json" },
  "mark": "point",
  "encoding": {
    "x": { "field": "Horsepower", "type": "quantitative" },
    "y": { "field": "Miles_per_Gallon", "type": "quantitative" }
  }
}
""")
```

```elixir
# {
#   "data": {
#     "url": "data/weather.csv"
#   },
#   "repeat": [
#     "temp_max",
#     "precipitation",
#     "wind"
#   ],
#   "spec": {
#     "mark": "line",
#     "encoding": {
#       "x": {"field": "date", "timeUnit": "month"},
#       "y": {
#         "field": {"repeat": "repeat"},
#         "aggregate": "mean"
#       },
#       "color": {"field": "location"}
#     }
#   }
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/weather.csv")
|> Vl.repeat(
  ["temp_max", "precipitation", "wind"],
  Vl.new()
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "date", time_unit: :month)
  |> Vl.encode_repeat(:y, :repeat, aggregate: :mean)
  |> Vl.encode_field(:color, "location")
)
```

```elixir
# {
#   "data": {
#     "url": "data/movies.json"
#   },
#   "repeat": {
#     "layer": ["US Gross", "Worldwide Gross"]
#   },
#   "spec": {
#     "mark": "line",
#     "encoding": {
#       "x": {
#         "bin": true,
#         "field": "IMDB Rating",
#         "type": "quantitative"
#       },
#       "y": {
#         "aggregate": "mean",
#         "field": {"repeat": "layer"},
#         "type": "quantitative",
#         "title": "Mean of US and Worldwide Gross"
#       },
#       "color": {
#         "datum": {"repeat": "layer"},
#         "type": "nominal"
#       }
#     }
#   }
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/movies.json")
|> Vl.repeat(
  [layer: ["US Gross", "Worldwide Gross"]],
  Vl.new()
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "IMDB Rating", bin: true, type: :quantitative)
  |> Vl.encode_repeat(:y, :layer,
    aggregate: :mean,
    type: :quantitative,
    title: "Mean of US and Worldwide Gross"
  )
  |> Vl.encode(:color, datum: [repeat: :layer], type: :nominal)
)
```

```elixir
# {
#   "repeat": {"column": ["Origin", "Cylinders"]},
#   "spec": {
#     "data": {"url": "data/cars.json"},
#     "mark": "point",
#     "encoding": {
#       "x": {"field": "Horsepower", "type": "quantitative"},
#       "y": {"field": "Miles_per_Gallon", "type": "quantitative"},
#       "color": {"field": {"repeat": "column"}, "type": "nominal"}
#     }
#   },
#   "resolve": {"scale": {"color": "independent"}}
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/cars.json")
|> Vl.repeat(
  [column: ["Origin", "Cylinders"]],
  Vl.new()
  |> Vl.mark(:point)
  |> Vl.encode_field(:x, "Horsepower", type: :quantitative)
  |> Vl.encode_field(:y, "Miles_per_Gallon", type: :quantitative)
  |> Vl.encode_repeat(:color, :column, type: :nominal)
)
|> Vl.resolve(:scale, color: :independent)
```

```elixir
# {
#   "data": {"url": "data/sp500.csv"},
#   "vconcat": [{
#     "width": 480,
#     "mark": "area",
#     "encoding": {
#       "x": {
#         "field": "date",
#         "type": "temporal",
#         "scale": {"domain": {"param": "brush"}},
#         "axis": {"title": ""}
#       },
#       "y": {"field": "price", "type": "quantitative"}
#     }
#   }, {
#     "width": 480,
#     "height": 60,
#     "mark": "area",
#     "params": [{
#       "name": "brush",
#       "select": {"type": "interval", "encodings": ["x"]}
#     }],
#     "encoding": {
#       "x": {
#         "field": "date",
#         "type": "temporal"
#       },
#       "y": {
#         "field": "price",
#         "type": "quantitative",
#         "axis": {"tickCount": 3, "grid": false}
#       }
#     }
#   }]
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/sp500.csv")
|> Vl.concat(
  [
    Vl.new(width: 480)
    |> Vl.mark(:area)
    |> Vl.encode_field(:x, "date",
      type: :temporal,
      scale: [domain: [param: "brush"]],
      axis: [title: nil]
    )
    |> Vl.encode_field(:y, "price", type: :quantitative),
    Vl.new(width: 480, height: 60)
    |> Vl.param("brush", select: [type: :interval, encodings: [:x]])
    |> Vl.mark(:area)
    |> Vl.encode_field(:x, "date", type: :temporal)
    |> Vl.encode_field(:y, "price", type: :quantitative, axis: [tick_count: 3, grid: false])
  ],
  :vertical
)
```

```elixir
# {
#   "width": 400, "height": 300,
#   "data": {
#     "url": "data/weather.csv"
#   },
#   "transform": [{"filter": "datum.location == \"Seattle\""}],
#   "encoding": {
#     "x": {
#       "timeUnit": "month",
#       "field": "date",
#       "axis": {"format": "%b", "title": null}
#     }
#   },
#   "layer": [
#     {
#       "mark": {"opacity": 0.3, "type": "area", "color": "#85C5A6"},
#       "encoding": {
#         "y": {
#           "aggregate": "average",
#           "field": "temp_max",
#           "scale": {"domain": [0, 30]},
#           "title": "Avg. Temperature (°C)",
#           "axis": {"titleColor": "#85C5A6"}
#         },

#         "y2": {
#           "aggregate": "average",
#           "field": "temp_min"
#         }
#       }
#     },
#     {
#       "mark": {"stroke": "#85A9C5", "type": "line", "interpolate": "monotone"},
#       "encoding": {
#         "y": {
#           "aggregate": "average",
#           "field": "precipitation",
#           "title": "Precipitation (inches)",
#           "axis": {"titleColor":"#85A9C5"}
#         }
#       }
#     }
#   ],
#   "resolve": {"scale": {"y": "independent"}}
# }

Vl.new(width: 400, height: 300)
|> Vl.data_from_url("https://vega.github.io/editor/data/weather.csv")
|> Vl.transform(filter: "datum.location == 'Seattle'")
|> Vl.encode_field(:x, "date", time_unit: :month, axis: [format: "%b", title: nil])
|> Vl.layers([
  Vl.new()
  |> Vl.mark(:area, opacity: 0.3, color: "#85C5A6")
  |> Vl.encode_field(:y, "temp_max",
    aggregate: :average,
    scale: [domain: [0, 30]],
    title: "Avg. Temperature (°C)",
    axis: [title_color: "#85C5A6"]
  )
  |> Vl.encode_field(:y2, "temp_min", aggregate: :average),
  Vl.new()
  |> Vl.mark(:line, interpolate: :monotone, stroke: "#85A9C5")
  |> Vl.encode_field(:y, "precipitation",
    aggregate: :average,
    title: "Precipitation (inches)",
    axis: [title_color: "#85A9C5"]
  )
])
|> Vl.resolve(:scale, y: :independent)
```

```elixir
# {
#   "data": {
#     "url": "data/weather.csv"
#   },
#   "transform": [{
#     "filter": "datum.location === 'Seattle'"
#   }],
#   "hconcat": [
#     {
#       "mark": "bar",
#       "encoding": {
#         "x": {
#           "timeUnit": "month",
#           "field": "date",
#           "type": "ordinal"
#         },
#         "y": {
#           "aggregate": "mean",
#           "field": "precipitation"
#         }
#       }
#     },
#     {
#       "mark": "point",
#       "encoding": {
#         "x": {
#           "field": "temp_min",
#           "bin": true
#         },
#         "y": {
#           "field": "temp_max",
#           "bin": true
#         },
#         "size": {"aggregate": "count"}
#       }
#     }
#   ]
# }

Vl.new()
|> Vl.data_from_url("https://vega.github.io/editor/data/weather.csv")
|> Vl.transform(filter: "datum.location == 'Seattle'")
|> Vl.concat(
  [
    Vl.new()
    |> Vl.mark(:bar)
    |> Vl.encode_field(:x, "date", time_unit: :month, type: :ordinal)
    |> Vl.encode_field(:y, "precipitation", aggregate: :mean),
    Vl.new()
    |> Vl.mark(:point)
    |> Vl.encode_field(:x, "temp_min", bin: true)
    |> Vl.encode_field(:y, "temp_max", bin: true)
    |> Vl.encode(:size, aggregate: :count)
  ],
  :horizontal
)
```

```elixir
# {
#   "name": "trellis_barley",
#   "data": {"url": "data/barley.json"},
#   "mark": "point",
#   "height": {"step": 12},
#   "encoding": {
#     "facet": {
#       "field": "site",
#       "type": "ordinal",
#       "columns": 2,
#       "sort": {"op": "median", "field": "yield"}
#     },
#     "x": {
#       "aggregate": "median",
#       "field": "yield",
#       "type": "quantitative",
#       "scale": {"zero": false}
#     },
#     "y": {
#       "field": "variety",
#       "type": "ordinal",
#       "sort": "-x"
#     },
#     "color": {"field": "year", "type": "nominal"}
#   }
# }

Vl.new(name: "trellis_barley", height: [step: 12])
|> Vl.data_from_url("https://vega.github.io/editor/data/barley.json")
|> Vl.mark(:point)
|> Vl.encode_field(:facet, "site",
  type: :ordinal,
  columns: 2,
  sort: [op: :median, field: "yield"]
)
|> Vl.encode_field(:x, "yield", aggregate: :median, type: :quantitative, scale: [zero: false])
|> Vl.encode_field(:y, "variety", type: :ordinal, sort: "-x")
|> Vl.encode_field(:color, "year", type: :nominal)
```
